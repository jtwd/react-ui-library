module.exports = /* eslint-disable */ [{"name":"Button","description":"","props":{"primary":{"type":{"name":"bool"},"required":false,"description":"Type of button","defaultValue":{"value":"false","computed":false}},"secondary":{"type":{"name":"bool"},"required":false,"description":"Type of button","defaultValue":{"value":"false","computed":false}},"large":{"type":{"name":"bool"},"required":false,"description":"Size of button","defaultValue":{"value":"false","computed":false}},"small":{"type":{"name":"bool"},"required":false,"description":"Size of button","defaultValue":{"value":"false","computed":false}},"children":{"type":{"name":"node"},"required":false,"description":"Contents of button","defaultValue":{"value":"null","computed":false}}},"code":"import React from 'react'\nimport styled from 'styled-components'\nimport { bool, node } from 'prop-types'\nimport { radiusRound, transTextHover, primaryNormal, lineHeightTight } from '../../theme/units'\nimport { trimChildrenHorizontal } from '../../theme/utils/utils.mixins'\nimport getPropStylesFromTheme from '../../theme/utils/getPropStylesFromTheme'\nimport types from './Button.types'\nimport sizes from './Button.sizes'\n\nconst tm = {\n  borderRadius: radiusRound,\n  transition: transTextHover,\n  weight: primaryNormal,\n  lineHeight: lineHeightTight,\n  types,\n  sizes\n}\n\nconst StyledButton = styled.button`\n  border-radius: ${tm.borderRadius};\n  transition: ${tm.transition};\n  font-weight: ${tm.weight};\n  line-height: ${tm.lineHeight};\n  border: 0;\n  cursor: pointer;\n  display: inline-block;\n  min-height: 1rem;\n  min-width: 3rem;\n  vertical-align: baseline;\n\n  ${props => !props.large && !props.small && getPropStylesFromTheme(tm, 'sizes', 'default')} ${props =>\n      props.small && getPropStylesFromTheme(tm, 'sizes', 'sm')} ${props =>\n      props.large && getPropStylesFromTheme(tm, 'sizes', 'lg')} ${props =>\n      !props.primary && !props.secondary && getPropStylesFromTheme(tm, 'types', 'default')} ${props =>\n      props.primary && getPropStylesFromTheme(tm, 'types', 'primary')} ${props =>\n      props.secondary && getPropStylesFromTheme(tm, 'types', 'secondary')} ${trimChildrenHorizontal};\n`\n\nfunction Button ({primary, secondary, large, small, children}) {\n  return (\n    <StyledButton\n      primary={primary}\n      secondary={secondary}\n      large={large}\n      small={small}\n    >\n      {children}\n    </StyledButton>\n  )\n}\n\nButton.propTypes = {\n  /** Type of button */\n  primary: bool,\n  /** Type of button */\n  secondary: bool,\n  /** Size of button */\n  large: bool,\n  /** Size of button */\n  small: bool,\n  /** Contents of button */\n  children: node\n}\n\nButton.defaultProps = {\n  primary: false,\n  secondary: false,\n  large: false,\n  small: false,\n  children: null\n}\n\nexport default Button\n","examples":[{"name":"ButtonSizes","description":"Sizes","code":"import React from 'react'\nimport Button from '../Button'\n\n/** Sizes */\nexport default function ButtonSizes() {\n  return (\n    <div>\n      <Button small>Small buttons</Button>\n      <Button>Default button</Button>\n      <Button large>Large button</Button>\n    </div>\n  )\n}"},{"name":"ButtonTypes","description":"Types","code":"import React from 'react'\nimport Button from '../Button'\n\n/** Types */\nexport default function ButtonTypes() {\n  return (\n    <div>\n      <Button>Default button</Button>\n      <Button primary>Primary button</Button>\n      <Button secondary>Secondary button</Button>\n    </div>\n  )\n}"}]},{"name":"Icon","description":"","props":{"icon":{"type":{"name":"string"},"required":true,"description":"Name of icon to be displayed","defaultValue":{"value":"'question'","computed":false}},"large":{"type":{"name":"bool"},"required":false,"description":"Icon size","defaultValue":{"value":"false","computed":false}},"small":{"type":{"name":"bool"},"required":false,"description":"Icon size","defaultValue":{"value":"false","computed":false}}},"code":"import React from 'react'\nimport styled from 'styled-components'\nimport {string, bool } from 'prop-types'\nimport getIcon from '../../theme/utils/utils.icons'\nimport getPropStylesFromTheme from '../../theme/utils/getPropStylesFromTheme'\nimport sizes from './Icon.sizes'\n\nconst tm = {\n  sizes\n}\n\nconst StyledIcon = styled.i`\n  display: inline-block;\n  \n  > svg {\n    display: block;\n    width: 100%;\n    height: auto;\n  }\n  \n  ${props => !props.large && !props.small && getPropStylesFromTheme(tm, 'sizes', 'default')}\n  ${props => props.small && getPropStylesFromTheme(tm, 'sizes', 'sm')}\n  ${props => props.large && getPropStylesFromTheme(tm, 'sizes', 'lg')}\n`\n\nfunction Icon({icon, large, small}) {\n  const myIcon = getIcon(icon)\n\n  return <StyledIcon large={large} small={small}>{myIcon}</StyledIcon>\n}\n\nIcon.propTypes = {\n  /** Name of icon to be displayed */\n  icon: string.isRequired,\n  /** Icon size */\n  large: bool,\n  /** Icon size */\n  small: bool\n}\n\nIcon.defaultProps = {\n  icon: 'question',\n  large: false,\n  small: false\n}\n\nexport default Icon\n","examples":[{"name":"IconCollection","description":"Collection","code":"import React from 'react'\n// import icons from '../../../theme/utils/utils.icons'\nimport Icon from '../Icon'\n\n/** Collection */\nexport default function IconCollection () {\n  return (\n    <div>\n      <Icon />\n    </div>\n  )\n}"},{"name":"IconSizes","description":"Sizes","code":"import React from 'react'\nimport Icon from '../Icon'\n\n/** Sizes */\nexport default function IconSizes() {\n  return (\n    <div>\n      <Icon icon=\"eye\" small />\n      &nbsp;\n      <Icon icon=\"lock\" />\n      &nbsp;\n      <Icon icon=\"menu\" large />\n    </div>\n  )\n}"}]},{"name":"IconButton","description":"Inherit styles and props from the <Button/> component","props":{"icon":{"type":{"name":"string"},"required":true,"description":"Name of icon"},"children":{"type":{"name":"node"},"required":false,"description":"Contents of button","defaultValue":{"value":"null","computed":false}}},"code":"import React from 'react'\nimport { string, node } from 'prop-types'\nimport getIcon from '../../theme/utils/utils.icons'\nimport IconButtonIcon from './IconButtonIcon'\nimport IconButtonButton from './IconButtonButton'\n\n/** Inherit styles and props from the <Button/> component */\nconst IconButton = props => {\n  const iconOnly = !props.children // no children means its an icon only button\n  const icon = getIcon(props.icon)\n\n  if (iconOnly && !icon) return null\n\n  return (\n    <IconButtonButton {...props} iconOnly={iconOnly}>\n      <IconButtonIcon {...props} iconOnly={iconOnly}>\n        {icon}\n      </IconButtonIcon>\n      {props.children}\n    </IconButtonButton>\n  )\n}\n\nIconButton.propTypes = {\n  /** Name of icon */\n  icon: string.isRequired,\n  /** Contents of button */\n  children: node\n}\n\nIconButton.defaultProps = {\n  children: null\n}\n\nexport default IconButton\n","examples":[{"name":"IconButtonWithText","description":"With text","code":"import React from 'react'\nimport IconButton from '../IconButton'\n\n/** With text */\nexport default function IconButtonWithText() {\n  return (\n    <div>\n      <IconButton small icon=\"lock\">Login</IconButton>\n      <IconButton primary icon=\"lock\">Login</IconButton>\n      <IconButton large secondary icon=\"lock\">Login</IconButton>\n    </div>\n  )\n}"},{"name":"IconButtonWithoutText","description":"Without text","code":"import React from 'react'\nimport IconButton from '../IconButton'\n\n/** Without text */\nexport default function IconButtonWithText() {\n  return (\n    <div>\n      <IconButton secondary small icon=\"close\" />\n      <IconButton primary icon=\"close\" />\n      <IconButton large icon=\"close\" />\n    </div>\n  )\n}"}]},{"name":"Label","description":"","props":{"htmlFor":{"type":{"name":"string"},"required":true,"description":""},"label":{"type":{"name":"string"},"required":true,"description":""},"required":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}}},"code":"import React from 'react'\nimport { string, bool } from 'prop-types'\nimport { Label as StyledLabel, RequiredSymbol } from './Label.styles'\n\nfunction Label({ htmlFor, label, required }) {\n  return (\n    <StyledLabel htmlFor={htmlFor}>\n      {label} {required && <RequiredSymbol title=\"Required field\" />}\n    </StyledLabel>\n  )\n}\n\nLabel.propTypes = {\n  htmlFor: string.isRequired,\n  label: string.isRequired,\n  required: bool\n}\n\nLabel.defaultProps = {\n  required: false\n}\n\nexport default Label\n","examples":[{"name":"LabelOptional","description":"","code":"import React from 'react'\nimport Label from '../Label'\n\nexport default function LabelOptional() {\n  return <Label htmlFor=\"field1\" label=\"Optional Field\" />\n}\n"},{"name":"LabelRequired","description":"","code":"import React from 'react'\nimport Label from '../Label'\n\nexport default function LabelRequired() {\n  return <Label htmlFor=\"field2\" label=\"Required Field\" required />\n}\n"}]},{"name":"TextInput","description":"","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":""},"name":{"type":{"name":"string"},"required":true,"description":""},"label":{"type":{"name":"string"},"required":true,"description":""},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'email'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false},{"value":"'tel'","computed":false}]},"required":false,"description":"","defaultValue":{"value":"'text'","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":""},"placeholder":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}},"value":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"''","computed":false}},"error":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"null","computed":false}},"children":{"type":{"name":"node"},"required":false,"description":"","defaultValue":{"value":"null","computed":false}}},"code":"import React from 'react'\nimport { string, oneOf, bool, func, node } from 'prop-types'\nimport Label from '../Label/index'\nimport { Field, Input, Error } from './TextInput.styles'\n\nfunction TextInput({ htmlId, name, label, type, required, onChange, placeholder, value, error, children, ...props }) {\n  return (\n    <Field>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <Input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        error={error}\n        {...props}\n      />\n      {children}\n      {error &&\n        <Error>\n          {error}\n        </Error>}\n    </Field>\n  )\n}\n\nTextInput.propTypes = {\n  htmlId: string.isRequired,\n  name: string.isRequired,\n  label: string.isRequired,\n  type: oneOf(['text', 'email', 'number', 'password', 'tel']),\n  required: bool,\n  onChange: func.isRequired,\n  placeholder: string,\n  value: string,\n  error: string,\n  children: node\n}\n\nTextInput.defaultProps = {\n  type: 'text',\n  required: false,\n  placeholder: '',\n  value: '',\n  error: null,\n  children: null\n}\n\nexport default TextInput\n","examples":[]},{"name":"Wrapper","description":"","props":{"children":{"type":{"name":"node"},"required":false,"description":"","defaultValue":{"value":"null","computed":false}}},"code":"import React from 'react'\nimport { node } from 'prop-types'\nimport styled from 'styled-components'\nimport { md } from '../../theme/spacers'\n\nconst StyledDiv = styled.div`\n  padding: ${md};\n`\n\nfunction Wrapper (props) {\n  return <StyledDiv>{props.children}</StyledDiv>\n}\n\nWrapper.propTypes = {\n  children: node\n}\n\nWrapper.defaultProps = {\n  children: null\n}\n\nexport default Wrapper\n","examples":[]}]